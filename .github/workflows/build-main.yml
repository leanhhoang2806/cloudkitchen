name: CI

on:
  push:
    branches:
      - main
      - '*'

jobs:
  build-and-push-main:
    name: Build and Push Docker Image (Main Branch)
    if: github.ref == 'refs/heads/main'  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_URI }}:latest .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_URI }}:latest

      - name: List images in ECR repository
        id: list_images
        run: |
          aws ecr describe-images --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --query 'imageDetails[*]' --output json > images.json

      - name: Identify images to keep
        run: |
          jq -r '.[] | select(.imageTags != null and (.imageTags | index("latest")) != null) | .imageDigest' images.json > images_to_keep.txt

      - name: Delete images not tagged as "latest"
        if: steps.list_images.outputs.images
        run: |
          images_to_delete=$(comm -23 <(sort images.json | jq -r '.[].imageDigest' | sort) <(sort images_to_keep.txt))
          for image in $images_to_delete; do
            aws ecr batch-delete-image --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --image-ids imageDigest=$image
          done



  build-only:
    name: Build Docker Image (Other Branches)
    if: github.ref != 'refs/heads/main' 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_URI }}:${GITHUB_SHA} .
