name: CI

on:
  push:
    branches:
      - main
      - '*'

jobs:
  build-and-push-main:
    name: Build and Push Docker Image (Main Branch)
    if: github.ref == 'refs/heads/main'  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_URI }}:lastest .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_URI }}:latest

      - name: Check if image exists in ECR
        id: check_image_exists
        run: |
          image_exists=$(aws ecr describe-images --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --image-ids imageTag=latest --query 'imageDetails[*]' --output json)
          if [ -n "$image_exists" ]; then
            echo "::set-output name=image_exists::true"
          else
            echo "::set-output name=image_exists::false"
          fi

      - name: Remove Untagged Docker images from ECR
        if: steps.check_image_exists.outputs.image_exists == 'true'
        run: |
          untagged_images=$(aws ecr list-images --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)
          if [ -n "$untagged_images" ]; then
            aws ecr batch-delete-image --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --image-ids "$untagged_images"
          else
            echo "No untagged images found to remove."
          fi

      # - name: Deploy to Amazon ECS
      #   uses: aws-actions/amazon-ecs-deploy-task@v2
      #   with:
      #     cluster: <your-cluster-name>
      #     service: <your-service-name>
      #     task-definition: <your-task-definition-name>
      #     image: ${{ secrets.ECR_URI }}:popo24_fastapi_server_backend
      #     image-region: <your-ecr-region>
      #     wait-for-service-stability: true

  build-only:
    name: Build Docker Image (Other Branches)
    if: github.ref != 'refs/heads/main' 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_URI }}:${GITHUB_SHA} .
