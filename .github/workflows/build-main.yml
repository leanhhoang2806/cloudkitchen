name: CI

on:
  push:
    branches:
      - main
      - '*'

jobs:
  build-and-push-main:
    name: Build and Push Docker Image (Main Branch)
    if: github.ref == 'refs/heads/main'  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_URI }}:latest .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_URI }}:latest
      
      - name: Get latest ECS task definition ARN
        id: get-task-definition
        run: |
          latest_task_definition=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --query 'services[0].taskDefinition' --output text)
          echo "::set-output name=task_definition::$latest_task_definition"

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --task-definition ${{ steps.get-task-definition.outputs.task_definition }}
  
      - name: List images in ECR repository
        id: list_images
        run: |
          aws ecr describe-images --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --query 'imageDetails[*]' --output json > images.json

      - name: Identify images to keep
        run: |
          jq -r '.[] | select(.imageTags != null and (.imageTags | index("latest")) != null) | .imageDigest' images.json > images_to_keep.txt

      - name: Identify images without tags
        run: |
          jq -r '.[] | select(.imageTags == null) | .imageDigest' images.json > images_no_tags.txt

      - name: Delete previous images
        if: steps.list_images.outputs.images
        run: |
          images_to_delete=$(comm -13 <(sort images_to_keep.txt) <(sort images.json | jq -r '.[].imageDigest'))
          for image in $images_to_delete; do
            aws ecr batch-delete-image --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --image-ids imageDigest=$image
          done

      - name: Delete images without tags
        run: |
          while IFS= read -r image; do
            aws ecr batch-delete-image --repository-name ${{ secrets.REMOTE_ECR_REPO_NAME }} --image-ids imageDigest="$image"
          done < images_no_tags.txt


  build-only:
    name: Build Docker Image (Other Branches)
    if: github.ref != 'refs/heads/main' 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_URI }}:${GITHUB_SHA} .
